require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  include Msf::Exploit::Remote::Tcp
  include Msf::Auxiliary::Scanner

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'MS17-010 EternalBlue Vulnerability Checker',
      'Description' => %q{
        This module checks if a host is vulnerable to the MS17-010 (EternalBlue) vulnerability.
      },
      'Author'      => ['Diogo'],
      'License'     => MSF_LICENSE
    ))

    register_options([
      Opt::RPORT(445)
    ])
  end

  def run_host(ip)
    print_status("Checking #{ip} for MS17-010 vulnerability")

    connect
    smb_request = "\x00\x00\x00\x90" +
                  "\xffSMB@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
                  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
                  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
                  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
                  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
                  "\x00\x00"

    sock.put(smb_request)
    response = sock.get_once(-1, 5)

    if response && response.include?("Public")
      print_good("#{ip} is vulnerable to MS17-010.")
    else
      print_error("#{ip} does not appear to be vulnerable.")
    end

    disconnect
  rescue ::Interrupt
    raise
  rescue ::Rex::ConnectionError
    print_error("#{ip} - Connection failed")
  end
end